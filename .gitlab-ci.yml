variables:
  PLATFORMS: "linux/arm64/v8,linux/amd64"
  DOCKER_BUILDKIT: "1"
  BASE_IMAGE: python

build:
  image: docker:latest@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  services:
    - docker:dind@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        TAG_SUFFIX: "-mr${CI_MERGE_REQUEST_IID}"
    # No suffux for default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        TAG_SUFFIX: ""

  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BASE_IMAGE}:${PYTHON_VERSION}" || true

    # Install QEMU emulation support in the kernel
    # See: https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images
    - docker run --privileged --rm tonistiigi/binfmt --install all

    # Create a buildx instance if one doesn't already exist
    - if [ "$(docker buildx ls | grep docker-container  | wc -l)" -le "0" ]; then
        docker context create buildx-build;
        docker buildx create --use buildx-build;
      fi

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --build-arg PYTHON_VERSION=$PYTHON_VERSION
        --build-arg NODE_VERSION=$NODE_VERSION
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --target $TARGET_STAGE
        --file Dockerfile .
        --push

  parallel:
    matrix:
      # Python
      - TARGET_STAGE: python
        PYTHON_VERSION: "3.11@sha256:ab60e444e04215a62671149f24c59cc2893b49cb5dad26f9d139077a86be760e"
        OUTPUT_TAG_NAME: "py311"

      - TARGET_STAGE: python
        PYTHON_VERSION: "3.12@sha256:ba98c70c9d81d34e7714c237d59f3cc38e111fe6356d3aa22a8d9b3513cde242"
        OUTPUT_TAG_NAME: "py312"

      - TARGET_STAGE: python
        PYTHON_VERSION: "3.13@sha256:c33390eacee652aecb774f9606c263b4f76415bc83926a6777ede0f853c6bc19"
        OUTPUT_TAG_NAME: "py313"

      # Python + Node 20
      - TARGET_STAGE: python-node
        PYTHON_VERSION: "3.11@sha256:ab60e444e04215a62671149f24c59cc2893b49cb5dad26f9d139077a86be760e"
        NODE_VERSION: "20"
        OUTPUT_TAG_NAME: "py311-node20"

      - TARGET_STAGE: python-node
        PYTHON_VERSION: "3.12@sha256:ba98c70c9d81d34e7714c237d59f3cc38e111fe6356d3aa22a8d9b3513cde242"
        NODE_VERSION: "20"
        OUTPUT_TAG_NAME: "py312-node20"

      - TARGET_STAGE: python-node
        PYTHON_VERSION: "3.13@sha256:c33390eacee652aecb774f9606c263b4f76415bc83926a6777ede0f853c6bc19"
        NODE_VERSION: "20"
        OUTPUT_TAG_NAME: "py313-node20"

      # Python + Node 22
      - TARGET_STAGE: python-node
        PYTHON_VERSION: "3.13@sha256:c33390eacee652aecb774f9606c263b4f76415bc83926a6777ede0f853c6bc19"
        NODE_VERSION: "22"
        OUTPUT_TAG_NAME: "py313-node22"
